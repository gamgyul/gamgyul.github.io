<!-- ---
layout: page
title: golang의 slice
category : go
--- -->

이번에도 godev 블로그를 번역한 문서이다.


slice는 golang에서 제공하는 지정된 시퀀스로 작업을 하는 자료구조이다. (c++ vector와 유사)

slice는 golang에서 배열을 기반으로 생성된 자료구조이기에 golang에서의 배열을 먼저 알아보자.
array는 고정된 크기를 가진다. 초기화는 기본값으로 초기화되며 메모리상에서는 연속된공간에 배치되어있다.
golang에서의 어레이 변수는 c처럼 첫번째 엘리멘트의 주소값을 가르키는게 아니고 어레이 자체를 의미한다.

따라서 array변수를 대입하면 array전체를 복사를 하게된다. 만약 복사를 피하고 싶으면 array에 대한 포인터를 사용해야된다.
어레이의 inference type을 위한 리터럴 값은 다음과 같다.

```go
b := [2]string{"Penn", "Teller"}
Or, you can have the compiler count the array elements for you:

b := [...]string{"Penn", "Teller"}
```
하지만 array는 크기가 고정되어있어서 많이 사용을 하지 않고 slice를 많이 사용한다.
slice는 배열과 다르게 `[]T`처럼 길이를 주지 않고 사용을한다.

```go
s := []string{"Penn", "Teller"}
```
또 slice는 make라는 함수로도 생성을할수 있다. 이 함수에는 생성할 타입, 길이, capacity를 적을 수 있다.
```go
s :=make([]string, 5, 5)
t :=make([]string, 5)

//len(t) = 5
//cap(t) = 5
```

또한 slice는 다른 slice와 array로 부터 생성될수도 있다. `s[start : end]` 와 같은 방식으로 생성할 수 있다.

slice는 array에 대한 descriptor로 내부적으로 array에대한 포인터와 길이, capacity를 포함하고 있다.

예를들어서 s가 make([]byte, 5)로 생성됬으면 s는 첫번째 element에 대한 포인터와 len 5 cap 5를 가지고있다.  s[2:4]라는 slice는 array의 3번째 element에 대한 포인터와 len 2 cap 3 을 가지고 있는 방식이다.

이러한 방식이기에 슬라이스가 새로운 슬라이스를 만들때 복사를하지 않기에 빠르지만 부분 slice가 값을 수정해도 다른 슬라이스에도 그 값이 변동하게된다.

그리고 slice는 capacity까지 성장 시킬수도 있다. 
예를들어 아까 s= s[2:4]라는 슬라이스가 있었을때 s = s[:cap(s)]로 변경시켜주면 slice를 cap 크기까지 더 키울수있다.(여기서는 3) slice는 capacity보다 크게는 만들수가 없다. 왜냐면 이걸 허용하게 되면 잘못된 메모리 주소에 접근할 수 있기떄문이다.


그런데 실제 프로그래밍을 할때는 이런 가변적인 크기를 요구하는 경우가 많다. 
go의 슬라이스의 경우 더 큰크기의 슬라이스를 만들어서 기존슬라이스값을 복사하는 방법을 사용한다.

go에서는 element를 복사하는 함수로 copy라는 함수를 제공한다.

```go
func copy(dst, src []T) int
```
위의 형태로 결과값으로 복사된 element수가 출력이된다. dst가 src보다 작으면 dst의 len크기까지만 복사가된다.


위의 copy함수를 이용하면 슬라이스의 데이터접근이 중복될 이유도 없고 더 큰 슬라이스를 생성하고 copy를 하는방법으로 slice크기를 늘릴 수 있는데 귀찮다.
그래서 golang에서는 append라는 내장 메소드를 제공한다.

```go
a := make([]int, 1)
// a == []int{0}
a = append(a, 1, 2, 3)
// a == []int{0, 1, 2, 3}
```
위방법은 마치 c++의 push_back처럼 slice에 element를 추가하는방식이다.
슬라이스와 슬라이스를 더하는 방식도 필요할텐데 이를 위해서는 ...키워드를 사용한다.

```go
a := []string{"John", "Paul"}
b := []string{"George", "Ringo", "Pete"}
a = append(a, b...) // equivalent to "append(a, b[0], b[1], b[2])"
// a == []string{"John", "Paul", "George", "Ringo", "Pete"}
```

슬라이스는 위에 언급한것처럼 기존 배열의 복사를 생성하는 방식이 아니고 배열은 참조하는 다른 슬라이스들이 다 없어질때까지 메모리에 배열 전체를 들고 있게된다. 이러한 방법은 slice에서 아주 일부만 필요해도 메모리에는 전체 배열이 다 들고있게 되는 문제가 종종발생한다.

아래 예제는 파일을 메모리에 읽은다음에 정규표현식에 맞는 첫번째 연속된 숫자를 찾아서 슬라이스로 리턴하는 함수다.

```go


var digitRegexp = regexp.MustCompile("[0-9]+")

func FindDigits(filename string) []byte {
    b, _ := ioutil.ReadFile(filename)
    return digitRegexp.Find(b)
}
```

아까 언급한 문제처럼 리턴하는 슬라이스가 원본 배열인 전체 파일에 대해서 참조를 하고 있어서 실제 사용하는것은 조그만한 부분인데 파일전체를 메모리에서 내릴 수 없게된다.

이문제를 해결하려면 아까 봤던 copy함수나 append를 사용하면된다.

```go
func CopyDigits(filename string) []byte {
    b, _ := ioutil.ReadFile(filename)
    b = digitRegexp.Find(b)
    c := make([]byte, len(b))
    copy(c, b)
    return c
}

func AppendDigit(filename string) []byte {
    b, _ := ioutil.ReadFile(filename)
    b = digitRegexp.Find(b)
    c := []byte
    c = append(c,b)
    
    return c
}
```


